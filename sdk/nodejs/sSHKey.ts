// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SSHKey extends pulumi.CustomResource {
    /**
     * Get an existing SSHKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SSHKeyState, opts?: pulumi.CustomResourceOptions): SSHKey {
        return new SSHKey(name, <any>state, { ...opts, id: id });
    }

    /**
     * The date this key was added.
     */
    public /*out*/ readonly created: pulumi.Output<string>;
    /**
     * The label of the Linode SSH Key.
     */
    public readonly label: pulumi.Output<string>;
    /**
     * The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.
     */
    public readonly sshKey: pulumi.Output<string>;

    /**
     * Create a SSHKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SSHKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SSHKeyArgs | SSHKeyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: SSHKeyState = argsOrState as SSHKeyState | undefined;
            inputs["created"] = state ? state.created : undefined;
            inputs["label"] = state ? state.label : undefined;
            inputs["sshKey"] = state ? state.sshKey : undefined;
        } else {
            const args = argsOrState as SSHKeyArgs | undefined;
            if (!args || args.label === undefined) {
                throw new Error("Missing required property 'label'");
            }
            if (!args || args.sshKey === undefined) {
                throw new Error("Missing required property 'sshKey'");
            }
            inputs["label"] = args ? args.label : undefined;
            inputs["sshKey"] = args ? args.sshKey : undefined;
            inputs["created"] = undefined /*out*/;
        }
        super("linode:index/sSHKey:SSHKey", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SSHKey resources.
 */
export interface SSHKeyState {
    /**
     * The date this key was added.
     */
    readonly created?: pulumi.Input<string>;
    /**
     * The label of the Linode SSH Key.
     */
    readonly label?: pulumi.Input<string>;
    /**
     * The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.
     */
    readonly sshKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SSHKey resource.
 */
export interface SSHKeyArgs {
    /**
     * The label of the Linode SSH Key.
     */
    readonly label: pulumi.Input<string>;
    /**
     * The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.
     */
    readonly sshKey: pulumi.Input<string>;
}
